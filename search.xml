<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[绘声绘影素材分享]]></title>
    <url>%2F2020%2F12%2F16%2Fhuishenghuiyingsucaifenxiang%2F</url>
    <content type="text"><![CDATA[大概文件目录多年收集的绘声绘影素材集合，分享给有需要的你 素材集合1 素材集合2 素材集合3 素材集合4 下载地址链接:https://pan.baidu.com/s/11sUw2uCjpo4O27AYjr3P3A 提取码6kac]]></content>
      <categories>
        <category>绘声绘影</category>
      </categories>
      <tags>
        <tag>绘声绘影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vsCode-PHP环境配置-windows]]></title>
    <url>%2F2020%2F05%2F22%2Fvscodephphuanjingpeizhiwindows%2F</url>
    <content type="text"><![CDATA[安装Wampserver Wampserver点击下载集成了Apache、mysql、php(多个版本的)等环境 安装Wampserver，直接下一步就可以了 这里可以选择要安装的应用，下面的是我选择，因为我本地已经安装了mysql所以我没有勾选mysql，如果你没有安装的话建议你勾选上mysql5.7，然后直接下一步就可以了 安装完成后，直接打开Wampserver, 任务栏的图标由红变绿说明已经启动成功，鼠标右键打开下图可以看到Apache启动的服务默认监听端口是80端口，如果你发现没启动成功很有可能就是你的电脑80端口已经被占用 浏览器直接输入localhost，看到下图说明已经安装并启动成功了 如果你的端口被占用可以这样修改，指着Wampserver图标点击鼠标左键可以看到下图 注：修改完后重新启动服务，浏览器打开localhost:8089看是否能访问 到这里Wampserver就安装完了 Wampserver配置PHP环境 这里我用这个php项目做测试CRMEB，我们先把项目clone下来，把项目复制复制到www目录怎么知道www目录在哪呢，看下图直接点击就可以进入该目录 复制的项目的目录结构如下 到这里已经成功一半的，下一步吧Apache默认打开目录指定到这个项目目录点击上图指定的，打开文档把路径修改如下就可以了 注：修改完后要重启Apache服务才能生效我们打开浏览，输入localhost就可以看到我们项目的页面了 vscode调试PHP项目 vscode打开刚才我复制到www目录的项目 vscode安装PHP Debug和PHP IntelliSense 并给他们配置php安装路径 然后我去看看Wampserver的想php-xdebug是否已经启用 如果上面的几个勾是时好的，就没问题 回到我们的vscode，创建调试文件，如下图 上面可以不做任何改动，这里说下&quot;port&quot;: 9000参数，为什么是9000我们去下面目录创建一个phpinfo文件，如下图： 然后在浏览器打开localhost/phpInfo.php找到xdebug.remote_port这里的数字和上面的创建调试文件对应就可以了 我这里用登录接口做调试，点击登录我的开发工具就可以捕获到断点了 如果你的没有自动获取不到断点，那还需要改下Apache配置文件，点击打开下面文件，滚动条拉到最底部或者搜索【xdebug】 配置xdebug.remote_autostart = On Xdebug配置 如果Wampserve没有自带php-xdebug的话才需要进行改步骤 复制phpinfo整个网页内容,粘贴到https://xdebug.org/wizard确定Xdebug版本点击按钮生成PHP版本对应的XDebug安装文件和说明相信你能懂上面说的，去配置下就可以了，然后检查xdebug是否安装成，怎么检查上面已经有说到 有其他问题可以在下面留言，看到了我会回复你的]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>vsCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端插件集合收藏]]></title>
    <url>%2F2020%2F05%2F20%2Fqianduanchajianjiheshoucang%2F</url>
    <content type="text"><![CDATA[vue图片剪栽组件 Web酷炫特效 Web酷炫特效2 15个vue开发必不可少的指令 数字之间的动画切换动效 功能十分强大打字机插件 按钮点击效果样式集合 视频播放插件 数字键盘 Vue DEMO利器, 在线运行 &amp; 编辑 Vue 单文件 微信小程序开发资源汇总]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发遇到的一些坑记录]]></title>
    <url>%2F2019%2F09%2F03%2Fkaifayudaodeyixiekengjilu%2F</url>
    <content type="text"><![CDATA[微信小程序 textarea 不跟随页面滚动问题，问题是textarea的某一层父标签样式加了overflowcss属性；去掉这个属性后就可以了 设计的页面如果有textarea应该尽量避页面出现滚动条 如果一定要滚动页面，那…就找解决办法吧 解决办法：我这里的使用的办法是用text和textarea做隐藏和显示切换，当我们点击text时显示textarea，失去焦点时显示text，这样就可以临时解决问题，但还不是很完美（当你需要自动获取焦点时，需要点击两次才能自动获取焦点），如果大家有完美的解决方案希望您能在下方评论留言。 使用小程序下拉刷新，页面外层布局不能使用flex布局 小程序textarea安卓和iOS显示不一样 解决办法：判断手机是否是iPhone，通过样式的方式解决 // 判断手机型号 wx.getSystemInfo({ success: function(res) { if(res.system.indexOf("iOS") != -1) { that.globalData.isIphone = true; } if(res.model.indexOf('iPhone X') != -1 || res.model == 'iPhone X' || res.model == 'iphonrx') { that.globalData.isIphoneX = true; } } }); .ds-textarea .textarea { display: block; width: 100%; height: 100%; line-height: 18px; } .ds-textarea .textarea.iphone { position: relative; top: -14rpx; left: -14rpx; } 百度地图 地图上 marker 和 circle 同时存在时，使用打点功能 marker 会错位解决办法：function setMark(e) { var x,y; var e = e||window.event; var b = map.pixelToPoint(new BMap.Pixel(e.clientX,e.clientY));//屏幕坐标转换为 var marker = new BMap.Marker(b); map.addOverlay(marker); drawcircle(b); } 浏览解析问题 文件有中文名和特殊符号是显示404问题，可通过转码解决问题 encodeURIComponent(fileName);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用资源网站推荐]]></title>
    <url>%2F2019%2F06%2F30%2Fchangyongziyuanwangzhantuijian%2F</url>
    <content type="text"><![CDATA[MacOS 常用破解软件下载网站推荐麦氪派(WaitsUn.com) 致力于分享优秀的Mac应用软件 Digit77.com | 精品Mac应用免费分享 懒得勤快，互联网分享精神，勤于发现，乐于分享 都是些奇怪的外语网站，如有需要也请自行想办法解决语言障碍和网络障碍。 http://www.downloadsoftware.ir/ https://www.0daydown.com/ https://downloadly.ir/ https://repack.me/ https://lrepacks.ru/ https://mac-torrents.io/ https://4howcrack.com/ https://free4pc.org/ Windows常用破解软件下载网站推荐吾乐吧软件站 | 打造一个高品质的绿色软件博客！ Windows系统下载 专注于win7,Win7纯净版下载,专注于win10,最新系统下载 网盘资源搜索我爱搜盘 - 搜索百度网盘资源，查找提取密码 疯狂影视搜索-最有用的影视搜索引擎 网盘搜索,就上天天搜索-国内优秀网盘搜索引擎 VPN网站好用便宜的且稳定的vpn网站 vpn工具下载win、mac、ios、Android都有 实用网站你注册过哪些网站？,通过手机号和邮箱查询你注册过的网站 TinyPNG图片压缩网站 cubic-bezier css动画工具 css图片精灵工具 无版权图片下载网站 惊人的免费图片 - Pixabay 一些好玩的网站 中午吃什么？——今天中午吃什么？ happy happy hardcore Liquid Particles 3D | spielzeugz.de/lab]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue常用命令和填坑技巧]]></title>
    <url>%2F2019%2F06%2F29%2Fvuechangyongminglinghetiankengjiqiao%2F</url>
    <content type="text"><![CDATA[阻止事件冒泡@click.stop 阻止默认事件@contextmenu.prevent 模板: {{msg}} 数据更新模板变化 {{*msg}} 数据只绑定一次 {{{msg}}} HTML转意输出 用户会看到花括号标记: v-cloak 防止闪烁, 比较大段落 &lt;span>{{msg}}&lt;/span> -> v-text {{{msg}}} -> v-html Vue.nextTick( [callback, context] ) // 修改数据 vm.msg = 'Hello' // DOM 还没有更新 Vue.nextTick(function () { // DOM 更新了 })]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信视频全屏方案]]></title>
    <url>%2F2019%2F06%2F29%2Fweixinshipinquanpingfangan%2F</url>
    <content type="text"><![CDATA[微信视频播放全屏问题 在ios和安卓手机里的微信下播放视频时，会遇到不少问题，例如需要手动点击，视频才会播放，并且视频会跳出微信框，出现控制条，如果视频不是腾讯视频，播放完毕会出现腾讯视频的广告推送，今天我们就来看一下如何规避这些问题。 解决办法：给video标签加一些属性，调用h5原生video。下面是我写的一个小例子的html核心部分： &lt;video id="videoALL" src="video/01.mp4" poster="images/1.jpg" /*视频封面*/ preload="auto" webkit-playsinline="true" /*这个属性是ios 10中设置可以让视频在小窗内播放，也就是不是全屏播放*/ playsinline="true" /*IOS微信浏览器支持小窗内播放*/ x-webkit-airplay="allow" x5-video-player-type="h5" /*启用H5播放器,是wechat安卓版特性*/ x5-video-player-fullscreen="true" /*全屏设置，设置为 true 是防止横屏*/ x5-video-orientation="portraint" /*播放器支付的方向，andscape横屏，portraint竖屏，默认值为竖屏*/ style="object-fit:fill"> &lt;/video> 下面我们来看看这些属性的作用： poster=”images/1.jpg”:属性规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。如果未设置该属性，则使用视频的第一帧来代替。 preload=”auto” ：属性规定在页面加载后载入视频。 webkit-playsinline和playsinline：视频播放时局域播放，不脱离文档流 。但是这个属性比较特别， 需要嵌入网页的APP比如WeChat中UIwebview 的allowsInlineMediaPlayback = YES webview.allowsInlineMediaPlayback = YES，才能生效。换句话说，如果APP不设置，你页面中加了这标签也无效，这也就是为什么安卓手机WeChat 播放视频总是全屏，因为APP不支持playsinline，而ISO的WeChat却支持。 这里就要补充下，如果是想做全屏直播或者全屏H5体验的用户，ISO需要设置删除 webkit-playsinline 标签，因为你设置 false 是不支持的 ，安卓则不需要，因为默认全屏。但这时候全屏是有播放控件的，无论你有没有设置control。 做直播的可能用得着播放控件，但是全屏H5是不需要的，那么去除全屏播放时候的控件，需要以下设置：同层播放。 x-webkit-airplay=”allow”暂时无法确切的知道其作用，但是小编猜测，这个属性应该是使此视频支持ios的AirPlay功能。使用AirPlay可以直接从使用iOS的设备上的不同位置播放视频、音乐还有照片文件，也就是说通过AirPlay功能可以实现影音文件的无线播放，当然前提是播放的终端设备也要支持相应的功能。 x5-video-player-type：启用同层H5播放器，就是在视频全屏的时候，div可以呈现在视频层上，也是WeChat安卓版特有的属性。同层播放别名也叫做沉浸式播放，播放的时候看似全屏，但是已经除去了control和微信的导航栏，只留下”X”和”&lt;”两键。目前的同层播放器只在Android（包括微信）上生效，暂时不支持iOS。至于为什么同层播放只对安卓开放，是因为安卓不能像ISO一样局域播放，默认的全屏会使得一些界面操作被阻拦，如果是全屏H5还好，但是做直播的话，诸如弹幕那样的功能就无法实现了，所以这时候同层播放的概念就解决了这个问题。不过在测试的过程中发现，不同版本的ISO和安卓效果略有不同。 x5-video-orientation：声明播放器支持的方向，可选值landscape 横屏, portraint竖屏。默认值portraint。无论是直播还是全屏H5一般都是竖屏播放，但是这个属性需要x5-video-player-type开启H5模式 x5­-video­-player­-fullscreen：全屏设置。它又两个属性值，ture和false，true支持全屏播放，false不支持全屏播放。其实，ISO 微信浏览器是Chrome的内核，相关的属性都支持，也是为什么X5同层播放不支持的原因。安卓微信浏览器是X5内核，一些属性标签比如playsinline就不支持，所以始终全屏。 还有个问题，在Android的微信里面，就算加上了上面的属性，还会出现上下有黑边，不能全屏的问题。解决办法：给video加上object-fit: fill;的style属性。如果还是有黑边有可能是视频尺寸不合适。]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重学前端]]></title>
    <url>%2F2019%2F06%2F02%2Fchongxueqianduan%2F</url>
    <content type="text"><![CDATA[0.1+0.2为什么不等于0.3// 比较大小使用下面的方式 0.1+0.2-0.3 &lt;= Number.EPSILON 我怎么去区分对象，数组和null呢?Object.prototype.toString.call(null); // console "[object Null]" 一个小练习：我们现在要实现一个红绿灯，把一个圆形 div 按照绿色 3 秒，黄色 1 秒，红色 2 秒循环改变背景色，你会怎样编写这个代码呢？]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE自定义过滤器和指令]]></title>
    <url>%2F2019%2F05%2F22%2Fvuezidingyiguoluqihezhiling%2F</url>
    <content type="text"><![CDATA[自定义过滤器（filters）1、过滤器可以串联： {{ message | filterA | filterB }} 在这个例子中，filterA被定义为接收单个参数的过滤器函数，表达式message的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数filterB，将filterA的结果传递到filterB中。 2、过滤器是 JavaScript 函数，因此可以接收参数： {{ message | filterA('arg1', arg2) }} 这里，filterA被定义为接收三个参数的过滤器函数。其中message的值作为第一个参数，普通字符串arg1作为第二个参数，表达式arg2的值作为第三个参数。 3、全局过滤器定义在main.js 里引入使用如下： import * as filters from './filters'; // global filters Object.keys(filters).forEach(key => { Vue.filter(key, filters[key]); }); 自定义指令的创建和使用（directives）1、钩子函数：将作用域与DOM进行链接，链接函数用来创建可以操作DOM的指令 bind - 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置update - 在bind之后立即以初始值为参数第一次调用，之后绑定值变化的时候，参数为新值与旧值unbind - 只调用一次，在指令从元素上解绑的时候调用 2、每个钩子都有el, binding, 和vnode参数可用. update和componentUpdated钩子还暴露了oldVnode, 以区分传递的旧值和较新的值 3、钩子的执行情况 a、页面加载时：bind insertedb、更新组件：update componentUpdatedc、卸载组件：unbindd、重新安装组件：bind inserted 注意区别：bind与inserted：bind时父节点为null，inserted时父节点存在；update与componentUpdated：update是数据更新前，componentUpdated是数据更新后。 4、指令的使用 Vue.directive('hello', { bind: function (el){ console.log('bind'); }, inserted: function (el){ console.log('inserted'); }, update: function (el){ console.log('update'); }, componentUpdated: function (el){ console.log('componentUpdated'); }, unbind: function (el){ console.log('unbind'); } }); 5、钩子函数参数 指令钩子函数会被传入以下参数： el：指令所绑定的元素，可以用来直接操作 DOM 。 binding：一个对象，包含以下属性： name：指令名，不包括 v- 前缀。 value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。 oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。 arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。 modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。 vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。 oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 6、全局指令定义在main.js 里引入使用如下： import * as directives from './directive'; // global directives Object.keys(directives).forEach(key => { Vue.directive(key, directives[key]); }); 参考文章vue官方文档-自定义指令vue官方文档-过滤器]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs配置]]></title>
    <url>%2F2019%2F05%2F12%2Fnodejspeizhi%2F</url>
    <content type="text"><![CDATA[node全局文件夹配置我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】 创建完两个空文件夹之后，打开cmd命令窗口，输入 npm config set prefix D:\DevelopeTool\node-v8.11.3\node_global npm config set cache D:\DevelopeTool\node-v8.11.3\node_cache 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” 进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】，将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 淘宝 NPM 镜像 npm install -g cnpm --registry=https://registry.npm.taobao.org]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2019%2F05%2F12%2Flinuxchangyongmingling%2F</url>
    <content type="text"><![CDATA[修改文件读写权限r： 4（读权限）w： 2（写权限）x： 1（执行权限）chmod 777 文件名 修改文件用户权限chown -R 用户 文件名称 修改文件用户组chogrp -R 组名 文件名 服务管理systemctl 操作名（stop, start, restart） 服务名.service 查询服务ps -aux ｜ grep 服务名 ssh登录服务器ssh -l root 212.64.101.100 软件安装位置查找mdfind -name 文件名 npm 常用命名 查询可用升级的包 npm outdated 更新包 npm update]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2019%2F05%2F12%2Fmarkdownyufa%2F</url>
    <content type="text"><![CDATA[table语法| Tables | Are | Cool | |----------|:-------------:|------:| | col 1 is | left-aligned | $1600 | | col 2 is | centered | $12 | | col 3 is | right-aligned | $1 | tips::-------------:居中-------------左对齐-----:右对齐-至少有一个,否则默认左对齐;例如:: Markdwon语法高亮 language key C c ActionScript actionscript Apache apache AppleScript applescript AsciiDoc asciidoc AspectJ asciidoc AutoHotkey autohotkey AVR Assembler avrasm Axapta axapta Bash bash BrainFuck brainfuck Cap’n Proto capnproto Clojure REPL clojure Clojure clojure CMake cmake CoffeeScript coffeescript C++ cpp C# cs CSS css D d Dart d Delphi delphi Diff diff Django django DOS.bat dos Dust dust Elixir elixir ERB(Embedded Ruby) erb Erlang REPL erlang-repl Erlang erlang FIX fix F# fsharp G-code(ISO 6983) gcode Gherkin gherkin GLSL glsl Go go Gradle gradle Groovy groovy Haml haml Handlebars handlebars Haskell haskell Haxe haxe HTML html HTTP http Ini file ini Java java JavaScript javascript JSON json Lasso lasso Less less Lisp lisp LiveCode livecodeserver LiveScript livescript Lua lua Makefile makefile Markdown markdown Mathematica mathematica Matlab matlab MEL (Maya Embedded Language) mel Mercury mercury Mizar mizar Monkey monkey Nginx nginx Nimrod nimrod Nix nix NSIS nsis Objective C objectivec OCaml ocaml Oxygene oxygene Parser 3 parser3 Perl perl PHP php PowerShell powershell Processing processing Python’s profiler output profile Protocol Buffers protobuf Puppet puppet Python python Q q R r RenderMan RIB rib Roboconf roboconf RenderMan RSL rsl Ruby ruby Oracle Rules Language ruleslanguage Rust rust Scala scala Scheme scheme Scilab scilab SCSS scss Smali smali SmallTalk smalltalk SML sml SQL sql Stata stata STEP Part21(ISO 10303-21) step21 Stylus stylus Swift swift Tcl tcl Tex tex text text/plain Thrift thrift Twig twig TypeScript typescript Vala vala VB.NET vbnet VBScript in HTML vbscript-html VBScript vbscript Verilog verilog VHDL vhdl Vim Script vim Intel x86 Assembly x86asm XL xl XML xml YAML yml]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo命令使用]]></title>
    <url>%2F2019%2F05%2F12%2Fhexominglingshiyong%2F</url>
    <content type="text"><![CDATA[新建文章你可以执行下列命令来创建一篇新文章。 hexo new [layout] &lt;title> layout属性有： page（新建页面）、draft(新建草稿)、 post（新建文章） 当你以draft新建文章时生成的文件在_drafts目录下，你可以运行 hexo publish [layout] &lt;title&gt; 文件就会自动移动到_posts文件夹下 常用命令$ hexo g #（generate）生成静态页面 $ hexo s #（server）运行服务预览页面 $ hexo d #（deploy）发布页面 七牛图片使用 {% qnimg demo.png title:图片标题 alt:图片说明 'class:class1 class2' extend:?imageView2/2/w/450 %} 标签最终会网页上自动生成如下格式的代码： &lt;img title="图片标题" alt="图片说明" class="class1 class2" src="http://img.ldouya.cn/static/images/七牛云.png?imageView2/2/w/450"> 在 qnimg 标签中，“title” “alt”和“extend”都是可选的，所以，图片引用完全可以简写成 {% qnimg demo.png %} 七牛高级用法上面介绍 qnimg 标签时，示例里面有个 extend 属性，它可以自动为图片引用链后面添加处理参数，在最终显示时，七牛云会自动帮我们处理，详细说明可以参见七年云图片处理，如下： ?imageView2/2/w/768|watermark/2/text/ICAgICDpsbzlhYjmo64KYmxvZy5hbm5pZXl1LmNvbQ==/fontsize/480/dissolve/32/dx/16/dy/16 上面的参数代码会将图片压缩成宽度为768像素并添加水印(text与fontsize之间的内容就是水印文字的base64编码)。 如果想对站点博客所有图片做同样的处理，我们没有必要对每个 qnimg 标签都添加同样的 extend 属性，只需要在站点配置文件的 qiniu 配置添添加统一样式后，若想对某个图片显示效果做特殊处理，我们可以在 qnimg 标签里面添加 extend 属性，标签的 extend属性会覆盖配置文件的。 添加统一样式后，如果某个图片引用想显示原图，我们可以在 qnimg 标签里面添加 normal 属性，如下： {% qnimg demo.png normal:yes %} 忽略文件在使用过程中，细心的读者可以发现， images 目录下所有文件，插件默认都会上传，使用 MAC 的读者，目录下经常会自动生成 “.DS_Store” 文件，如果不做特殊处理，此文件也会上传，为避免插件将无意义的文件自动上传图床，我们可以在站点配置文件的为 qiniu 添加忽略配置，如下： ... ignoring_files: - '**/.DS_Store' ... ...]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发工具VsCode-Eslint和代码格式化相关配置]]></title>
    <url>%2F2019%2F02%2F15%2Fkaifagongjuvscodeeslinthedaimageshihuaxiangguanpeizhi%2F</url>
    <content type="text"><![CDATA[eslint 全局安装 首先得使用npm安装下面的插件直接复制下面命令到控制台运行就可以了npm i -g eslint eslint-plugin-html eslint-plugin-vue babel-eslint vscode 配置 vscode需要安装一下插需要安装【Prettier-Code formatter】和【ESLint】、【Vetur】、【beautify】插件 打开vscod设置，把下面的配置项复制进去 { "editor.tabSize": 4, "prettier.tabWidth": 4, "files.autoSave": "afterDelay", "files.autoSaveDelay": 60000, "vetur.format.options.tabSize": 4, "vetur.validation.template": false, "vetur.format.defaultFormatter.html": "js-beautify-html", "vetur.format.defaultFormatter.js": "prettier", "vetur.format.defaultFormatterOptions": { "js-beautify-html": { "wrap-attributes": "aligned-multiple", "wrap-attributes-indent-size": 4, "wrap-line-length": 150, "indent_size": 4, }, "prettier": { "tabWidth": 4, "printWidth": 200, "singleQuote": false, "jsxBracketSameLine": true, }, }, "editor.codeActionsOnSave": { "source.fixAll.eslint": true } } eslintrc.js以下是我公司目前使用的esliint配置的代码规范，仅供参考该配置项是基于vue-cli3搭建的项目配置的 module.exports = { root: true, parserOptions: { parser: 'babel-eslint', sourceType: 'module' }, env: { browser: true, node: true, es6: true, }, extends: ['plugin:vue/recommended', 'eslint:recommended'], // add your custom rules here //it is base on https://github.com/vuejs/eslint-config-vue rules: { "sort-imports": ["error", { "ignoreCase": true, "ignoreMemberSort": false, "memberSyntaxSortOrder": ["none", "all", "multiple", "single"] }], "vue/require-default-prop": "off", "vue/max-attributes-per-line": [2, { "singleline": 10, "multiline": { "max": 1, "allowFirstLine": false } }], "vue/singleline-html-element-content-newline": "off", "vue/multiline-html-element-content-newline": "off", "vue/order-in-components": "off", "vue/name-property-casing": ["error", "PascalCase"], "vue/no-v-html": "off", "vue/html-closing-bracket-newline": ["error", { "singleline": "never", "multiline": "never" }], "vue/html-indent": ["error", 4, { "attribute": 1, "baseIndent": 1, "closeBracket": 0, "alignAttributesVertically": true, "ignores": [] }], "indent": [2, 4, { // 强制使用一致的缩进 'SwitchCase': 1 }], 'no-mixed-spaces-and-tabs': 2, // 禁止空格和 tab 的混合缩进 'arrow-spacing': [2, { // 强制箭头函数的箭头前后使用一致的空格 'before': true, 'after': true }], 'block-spacing': [2, 'always'], // 禁止或强制在代码块中开括号前和闭括号后有空格 'brace-style': [2, '1tbs', { // 强制在代码块中使用一致的大括号风格 'allowSingleLine': true }], 'camelcase': [0, { // 强制使用骆驼拼写法命名约定 'properties': 'always' }], 'comma-dangle': [2, 'never'], // 要求或禁止末尾逗号 'comma-spacing': [2, { // 强制在逗号前后使用一致的空格 'before': false, 'after': true }], 'comma-style': [2, 'last'], // 强制使用一致的逗号风格 'curly': [2, 'multi-line'], // 强制所有控制语句使用一致的括号风格 'dot-location': [2, 'property'], // 强制在点号之前和之后一致的换行 'eol-last': 2, // 要求或禁止文件末尾存在空行 //'eqeqeq': [2, 'allow-null'], // 要求使用 === 和 !== 'key-spacing': [2, { // 强制在对象字面量的属性中键和值之间使用一致的间距 'beforeColon': false, 'afterColon': true }], 'keyword-spacing': [2, { // 强制在关键字前后使用一致的空格 // "after": true, // "before": true "overrides": { "if": { "after": false, "before": true }, "else": { "after": true, "before": false }, "for": { "after": false, "before": true }, "while": { "after": false, "before": true } } }], 'new-cap': [2, { // 要求构造函数首字母大写 'newIsCap': true, 'capIsNew': false }], 'new-parens': 2, // 要求调用无参构造函数时有圆括号 'no-array-constructor': 2, // 禁用 Array 构造函数 'no-caller': 2, // 禁用 arguments.caller 或 arguments.callee 'no-console': 'off', // 禁用 console 'no-class-assign': 2, // 禁止修改类声明的变量 'no-cond-assign': 2, // 禁止条件表达式中出现赋值操作符 'no-const-assign': 2, // 禁止修改 const 声明的变量 'no-control-regex': 2, // 禁止在正则表达式中使用控制字符 'no-delete-var': 2, // 禁止删除变量 'no-dupe-args': 2, // 禁止 function 定义中出现重名参数 'no-dupe-class-members': 2, // 禁止类成员中出现重复的名称 'no-dupe-keys': 2, // 禁止对象字面量中出现重复的 key 'no-duplicate-case': 2, // 禁止出现重复的 case 标签 'no-empty-character-class': 2, // 禁止在正则表达式中使用空字符集 'no-empty-pattern': 2, // 禁止使用空解构模式 'no-eval': 2, // 禁用 eval() 'no-ex-assign': 2, // 禁止对 catch 子句的参数重新赋值 'no-extend-native': 2, // 禁止扩展原生类型 'no-extra-parens': [2, 'functions'], // 禁止不必要的括号 'no-fallthrough': 2, // 禁止 case 语句落空 'no-floating-decimal': 2, // 禁止数字字面量中使用前导和末尾小数点 'no-func-assign': 2, // 禁止对 function 声明重新赋值 'no-implied-eval': 2, // 禁止使用类似 eval() 的方法 'no-invalid-regexp': 2, // 禁止 RegExp 构造函数中存在无效的正则表达式字符串 'no-irregular-whitespace': 2, // 禁止在字符串和注释之外不规则的空白 'no-label-var': 2, // 不允许标签与变量同名 'no-labels': [2, { // 禁用标签语句 'allowLoop': false, 'allowSwitch': false }], 'no-lone-blocks': 2, // 禁用不必要的嵌套块 'no-multi-spaces': 2, // 禁止使用多个空格 'no-multi-str': 2, // 禁止使用多行字符串 'no-multiple-empty-lines': [2, { // 禁止出现多行空行 'max': 2 }], 'no-new-require': 2, // 禁止调用 require 时使用 new 操作符 'no-new-symbol': 2, // 禁止 Symbolnew 操作符和 new 一起使用 'no-new-wrappers': 2, // 禁止对 String，Number 和 Boolean 使用 new 操作符 'no-obj-calls': 2, // 禁止把全局对象作为函数调用 'no-octal': 2, // 禁用八进制字面量 'no-octal-escape': 2, // 禁止在字符串中使用八进制转义序列 'no-path-concat': 2, // 禁止对 __dirname 和 __filename 进行字符串连接 'no-proto': 2, // 禁用 __proto__ 属性 'no-redeclare': 2, // 禁止多次声明同一变量 'no-regex-spaces': 2, // 不允许正则表达式文字中的多个空格 'no-return-assign': [2, 'except-parens'], // 禁止在 return 语句中使用赋值语句 'no-self-assign': 2, // 禁止自我赋值 'no-self-compare': 2, // 禁止自身比较 'no-sequences': 2, // 禁用逗号操作符 'no-shadow-restricted-names': 2, // 禁止将标识符定义为受限的名字 'no-spaced-func': 2, // 要求或禁止在函数标识符和其调用之间有空格 (func-call-spacing) 'no-sparse-arrays': 2, // 禁用稀疏数组 'no-this-before-super': 2, // 禁止在构造函数中，在调用 super() 之前使用 this 或 super 'no-throw-literal': 2, // 禁止抛出异常字面量 'no-trailing-spaces': 2, // 禁用行尾空格 'no-undef': 2, // 禁用未声明的变量，除非它们在 /*global */ 注释中被提到 'no-undef-init': 2, // 禁止将变量初始化为 undefined 'no-unexpected-multiline': 2, // 禁止出现令人困惑的多行表达式 'no-unmodified-loop-condition': 2, // 禁用一成不变的循环条件 'no-unneeded-ternary': [2, { // 禁止可以在有更简单的可替代的表达式时使用三元操作符 'defaultAssignment': false }], 'no-unreachable': 2, // 禁止在return、throw、continue 和 break 语句之后出现不可达代码 'no-unsafe-finally': 2, // 禁止在 finally 语句块中出现控制流语句 'no-unused-vars': [2, { // 禁止出现未使用过的变量 'vars': 'all', 'args': 'none' }], 'no-useless-call': 2, // 禁止不必要的 .call() 和 .apply() 'no-useless-computed-key': 2, // 禁止在对象中使用不必要的计算属性 'no-useless-constructor': 2, // 禁用不必要的构造函数 'no-useless-escape': 0, // 禁用不必要的转义字符 'no-whitespace-before-property': 2, // 禁止属性前有空白 'no-with': 2, // 禁用 with 语句 'one-var': [2, { // 强制函数中的变量要么一起声明要么分开声明 'initialized': 'never' }], 'operator-linebreak': [2, 'before'], // 强制操作符使用一致的换行符 'padded-blocks': [2, 'never'], // 要求或禁止块内填充 // 'quotes': [2, 'double', { // 强制使用一致的反勾号、双引号或单引号 // 'avoidEscape': true, // 'allowTemplateLiterals': true // }], 'semi': [2, 'always', { "omitLastInOneLineBlock": true }], // 要求或禁止使用分号代替 ASI 'semi-spacing': [2, { // 强制分号之前和之后使用一致的空格 'before': false, 'after': true }], 'space-before-blocks': [2, 'always'], // 强制在块之前使用一致的空格 'space-before-function-paren': [2, 'never'], // 强制在 function的左括号之前使用一致的空格 'space-in-parens': [2, 'never'], // 强制在圆括号内使用一致的空格 'space-infix-ops': 2, // 要求操作符周围有空格 'space-unary-ops': [2, { // 强制在一元操作符前后使用一致的空格 'words': true, 'nonwords': false }], 'spaced-comment': [2, 'always', { // 强制在注释中 // 或 /* 使用一致的空格 'markers': ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] }], 'template-curly-spacing': [2, 'never'], // 要求或禁止模板字符串中的嵌入表达式周围空格的使用 'use-isnan': 2, // 要求使用 isNaN() 检查 NaN 'valid-typeof': 2, // 强制 typeof 表达式与有效的字符串进行比较 'wrap-iife': [2, 'any'], // 要求 IIFE 使用括号括起来 'yield-star-spacing': [2, 'both'], // 强制在 yield* 表达式中 * 周围使用空格 'yoda': [2, 'never'], // 要求或禁止 “Yoda” 条件 'prefer-const': 2, // 要求使用 const 声明那些声明后不再被修改的变量 'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0, // 禁用 debugger 'object-curly-spacing': [2, 'always', { // 强制在大括号中使用一致的空格 objectsInObjects: false }], 'array-bracket-spacing': [2, 'never'] // 强制数组方括号中使用一致的空格 } } eslint 解释"no-alert": 0,//禁止使用alert confirm prompt "no-array-constructor": 2,//禁止使用数组构造器 "no-bitwise": 0,//禁止使用按位运算符 "no-caller": 1,//禁止使用arguments.caller或arguments.callee "no-catch-shadow": 2,//禁止catch子句参数与外部作用域变量同名 "no-class-assign": 2,//禁止给类赋值 "no-cond-assign": 2,//禁止在条件表达式中使用赋值语句 "no-console": 2,//禁止使用console "no-const-assign": 2,//禁止修改const声明的变量 "no-constant-condition": 2,//禁止在条件中使用常量表达式 if(true) if(1) "no-continue": 0,//禁止使用continue "no-control-regex": 2,//禁止在正则表达式中使用控制字符 "no-debugger": 2,//禁止使用debugger "no-delete-var": 2,//不能对var声明的变量使用delete操作符 "no-div-regex": 1,//不能使用看起来像除法的正则表达式/=foo/ "no-dupe-keys": 2,//在创建对象字面量时不允许键重复 {a:1,a:1} "no-dupe-args": 2,//函数参数不能重复 "no-duplicate-case": 2,//switch中的case标签不能重复 "no-else-return": 2,//如果if语句里面有return,后面不能跟else语句 "no-empty": 2,//块语句中的内容不能为空 "no-empty-character-class": 2,//正则表达式中的[]内容不能为空 "no-empty-label": 2,//禁止使用空label "no-eq-null": 2,//禁止对null使用==或!=运算符 "no-eval": 1,//禁止使用eval "no-ex-assign": 2,//禁止给catch语句中的异常参数赋值 "no-extend-native": 2,//禁止扩展native对象 "no-extra-bind": 2,//禁止不必要的函数绑定 "no-extra-boolean-cast": 2,//禁止不必要的bool转换 "no-extra-parens": 2,//禁止非必要的括号 "no-extra-semi": 2,//禁止多余的冒号 "no-fallthrough": 1,//禁止switch穿透 "no-floating-decimal": 2,//禁止省略浮点数中的0 .5 3. "no-func-assign": 2,//禁止重复的函数声明 "no-implicit-coercion": 1,//禁止隐式转换 "no-implied-eval": 2,//禁止使用隐式eval "no-inline-comments": 0,//禁止行内备注 "no-inner-declarations": [2, "functions"],//禁止在块语句中使用声明（变量或函数） "no-invalid-regexp": 2,//禁止无效的正则表达式 "no-invalid-this": 2,//禁止无效的this，只能用在构造器，类，对象字面量 "no-irregular-whitespace": 2,//不能有不规则的空格 "no-iterator": 2,//禁止使用__iterator__ 属性 "no-label-var": 2,//label名不能与var声明的变量名相同 "no-labels": 2,//禁止标签声明 "no-lone-blocks": 2,//禁止不必要的嵌套块 "no-lonely-if": 2,//禁止else语句内只有if语句 "no-loop-func": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） "no-mixed-requires": [0, false],//声明时不能混用声明类型 "no-mixed-spaces-and-tabs": [2, false],//禁止混用tab和空格 "linebreak-style": [0, "windows"],//换行风格 "no-multi-spaces": 1,//不能用多余的空格 "no-multi-str": 2,//字符串不能用\换行 "no-multiple-empty-lines": [1, {"max": 2}],//空行最多不能超过2行 "no-native-reassign": 2,//不能重写native对象 "no-negated-in-lhs": 2,//in 操作符的左边不能有! "no-nested-ternary": 0,//禁止使用嵌套的三目运算 "no-new": 1,//禁止在使用new构造一个实例后不赋值 "no-new-func": 1,//禁止使用new Function "no-new-object": 2,//禁止使用new Object() "no-new-require": 2,//禁止使用new require "no-new-wrappers": 2,//禁止使用new创建包装实例，new String new Boolean new Number "no-obj-calls": 2,//不能调用内置的全局对象，比如Math() JSON() "no-octal": 2,//禁止使用八进制数字 "no-octal-escape": 2,//禁止使用八进制转义序列 "no-param-reassign": 2,//禁止给参数重新赋值 "no-path-concat": 0,//node中不能使用__dirname或__filename做路径拼接 "no-plusplus": 0,//禁止使用++，-- "no-process-env": 0,//禁止使用process.env "no-process-exit": 0,//禁止使用process.exit() "no-proto": 2,//禁止使用__proto__属性 "no-redeclare": 2,//禁止重复声明变量 "no-regex-spaces": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/ "no-restricted-modules": 0,//如果禁用了指定模块，使用就会报错 "no-return-assign": 1,//return 语句中不能有赋值表达式 "no-script-url": 0,//禁止使用javascript:void(0) "no-self-compare": 2,//不能比较自身 "no-sequences": 0,//禁止使用逗号运算符 "no-shadow": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 "no-shadow-restricted-names": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用 "no-spaced-func": 2,//函数调用时 函数名与()之间不能有空格 "no-sparse-arrays": 2,//禁止稀疏数组， [1,,2] "no-sync": 0,//nodejs 禁止同步方法 "no-ternary": 0,//禁止使用三目运算符 "no-trailing-spaces": 1,//一行结束后面不要有空格 "no-this-before-super": 0,//在调用super()之前不能使用this或super "no-throw-literal": 2,//禁止抛出字面量错误 throw "error"; "no-undef": 1,//不能有未定义的变量 "no-undef-init": 2,//变量初始化时不能直接给它赋值为undefined "no-undefined": 2,//不能使用undefined "no-unexpected-multiline": 2,//避免多行表达式 "no-underscore-dangle": 1,//标识符不能以_开头或结尾 "no-unneeded-ternary": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; "no-unreachable": 2,//不能有无法执行的代码 "no-unused-expressions": 2,//禁止无用的表达式 "no-unused-vars": [2, {"vars": "all", "args": "after-used"}],//不能有声明后未被使用的变量或参数 "no-use-before-define": 2,//未定义前不能使用 "no-useless-call": 2,//禁止不必要的call和apply "no-void": 2,//禁用void操作符 "no-var": 0,//禁用var，用let和const代替 "no-warning-comments": [1, { "terms": ["todo", "fixme", "xxx"], "location": "start" }],//不能有警告备注 "no-with": 2,//禁用with "array-bracket-spacing": [2, "never"],//是否允许非空数组里面有多余的空格 "arrow-parens": 0,//箭头函数用小括号括起来 "arrow-spacing": 0,//=>的前/后括号 "accessor-pairs": 0,//在对象中使用getter/setter "block-scoped-var": 0,//块语句中使用var "brace-style": [1, "1tbs"],//大括号风格 "callback-return": 1,//避免多次调用回调什么的 "camelcase": 2,//强制驼峰法命名 "comma-dangle": [2, "never"],//对象字面量项尾不能有逗号 "comma-spacing": 0,//逗号前后的空格 "comma-style": [2, "last"],//逗号风格，换行时在行首还是行尾 "complexity": [0, 11],//循环复杂度 "computed-property-spacing": [0, "never"],//是否允许计算后的键名什么的 "consistent-return": 0,//return 后面是否允许省略 "consistent-this": [2, "that"],//this别名 "constructor-super": 0,//非派生类不能调用super，派生类必须调用super "curly": [2, "all"],//必须使用 if(){} 中的{} "default-case": 2,//switch语句最后必须有default "dot-location": 0,//对象访问符的位置，换行的时候在行首还是行尾 "dot-notation": [0, { "allowKeywords": true }],//避免不必要的方括号 "eol-last": 0,//文件以单一的换行符结束 "eqeqeq": 2,//必须使用全等 "func-names": 0,//函数表达式必须有名字 "func-style": [0, "declaration"],//函数风格，规定只能使用函数声明/函数表达式 "generator-star-spacing": 0,//生成器函数*的前后空格 "guard-for-in": 0,//for in循环要用if语句过滤 "handle-callback-err": 0,//nodejs 处理错误 "id-length": 0,//变量名长度 "indent": [2, 4],//缩进风格 "init-declarations": 0,//声明时必须赋初值 "key-spacing": [0, { "beforeColon": false, "afterColon": true }],//对象字面量中冒号的前后空格 "lines-around-comment": 0,//行前/行后备注 "max-depth": [0, 4],//嵌套块深度 "max-len": [0, 80, 4],//字符串最大长度 "max-nested-callbacks": [0, 2],//回调嵌套深度 "max-params": [0, 3],//函数最多只能有3个参数 "max-statements": [0, 10],//函数内最多有几个声明 "new-cap": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用 "new-parens": 2,//new时必须加小括号 "newline-after-var": 2,//变量声明后是否需要空一行 "object-curly-spacing": [0, "never"],//大括号内是否允许不必要的空格 "object-shorthand": 0,//强制对象字面量缩写语法 "one-var": 1,//连续声明 "operator-assignment": [0, "always"],//赋值运算符 += -=什么的 "operator-linebreak": [2, "after"],//换行时运算符在行尾还是行首 "padded-blocks": 0,//块语句内行首行尾是否要空行 "prefer-const": 0,//首选const "prefer-spread": 0,//首选展开运算 "prefer-reflect": 0,//首选Reflect的方法 "quotes": [1, "single"],//引号类型 `` "" '' "quote-props":[2, "always"],//对象字面量中的属性名是否强制双引号 "radix": 2,//parseInt必须指定第二个参数 "id-match": 0,//命名检测 "require-yield": 0,//生成器函数必须有yield "semi": [2, "always"],//语句强制分号结尾 "semi-spacing": [0, {"before": false, "after": true}],//分号前后空格 "sort-vars": 0,//变量声明时排序 "space-after-keywords": [0, "always"],//关键字后面是否要空一格 "space-before-blocks": [0, "always"],//不以新行开始的块{前面要不要有空格 "space-before-function-paren": [0, "always"],//函数定义时括号前面要不要有空格 "space-in-parens": [0, "never"],//小括号里面要不要有空格 "space-infix-ops": 0,//中缀操作符周围要不要有空格 "space-return-throw-case": 2,//return throw case后面要不要加空格 "space-unary-ops": [0, { "words": true, "nonwords": false }],//一元运算符的前/后要不要加空格 "spaced-comment": 0,//注释风格要不要有空格什么的 "strict": 2,//使用严格模式 "use-isnan": 2,//禁止比较时使用NaN，只能用isNaN() "valid-jsdoc": 0,//jsdoc规则 "valid-typeof": 2,//必须使用合法的typeof的值 "vars-on-top": 2,//var必须放在作用域顶部 "wrap-iife": [2, "inside"],//立即执行函数表达式的小括号风格 "wrap-regex": 0,//正则表达式字面量用小括号包起来 "yoda": [2, "never"]//禁止尤达条件]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>eslitn</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端-VUE规范]]></title>
    <url>%2F2019%2F02%2F15%2Fqianduanvueguifan%2F</url>
    <content type="text"><![CDATA[命名分类camelCase（驼峰式，也叫小驼峰命名，e.g. userInfo）PascalCase（帕斯卡命名式，也叫大驼峰命名，e.g. UserInfo）kebab-case（短横线连接式，e.g. user-info）snake_case（下划线连接式，e.g. user_info） 标签使用除了div ul&gt;li标签外，其他html标签内不能含有任务组件的标签（包括element-ui标签）el-row 必须包含el-col 不要单独使用el-col 样式使用scss语法 每个.vue文件下的style都必须加上scope属性 &lt;style rel="stylesheet/scss" lang="scss" scoped>&lt;/style> 组件建议 每个 Vue 组件的代码建议不要超出 200 行，如果超出建议拆分组件。 组件一般情况下是可以拆成基础/ui部分和业务部分，基础组件一般是承载呈现，基础功能，不和业务耦合部分。 业务组件一般包含业务功能业务特殊数据等等。 组件命名组件文件名除index.vue之外，一律采用PascalCase(大驼峰)写法。原因是引入组件时，组件的变量通常用PascalCase格式，以区别于一般变量。组件文件名与变量名一致，方便对应。 import UserBook from './user/UserBook' 组件名应该始终是多个单词的，根组件 App 除外html元素都是单个单词的（如 &lt;article&gt;,&lt;header&gt;)，为了区分组件和一般html元素，组件由多个单词组成，如BookItem.vue，单独的Book.vue不推荐。 UI组件/基础组件开发的时候注意可拓展性，支持数据传参进行渲染，支持插槽slot。设置有mixin，mixin中放了基础信息和方法。 容器组件和当前业务耦合性比较高，由多个基础组件组成，可承载当前页的业务接口请求和数据(vuex)。 组件存放位置ui组件存放在 src/components/ 中，包含 xxx.vue和 xxmixin.js 和 readme.md。 组件通讯避免数据的分发源混乱，不建议使用 eventBus控制数据，应使用 props来和 $emit来数据分发和传送。同级组件的通讯一般会有一个中间容器组件作为桥梁。容器组件作为数据的接受和分发点。 组件的挂载和销毁通过v-if控制组件的挂载和销毁 &lt;testcomponent v-if="componentActive">&lt;/testcomponent> 通过is控制组件的挂载和销毁 &lt;component is="componentName">&lt;/component> Vue文件结构顺序：template -&gt; script -&gt; style。一个组件尽量不要超过200行，页面包含独立部分时尽量分离成子组件 &lt;template> &lt;div>...&lt;/div> &lt;/template> &lt;script> export default { components: {}, data() { return {}; }, created(){}, methods: {}, }; &lt;/script> &lt;!-- 声明语言，并且添加scoped --> &lt;style lang="scss" scoped>...&lt;/style> 组件/实例的选项顺序 - name (全局引用) - components (模板依赖) - directives ... - filters ... - mixins (组合) - props (接口) - data (本地状态属性) - computed ... - watch (响应回调) - created (生命周期函数) - mounted ... - methods (实例属性) Vue Router Path规范router path采用kebab-case格式。 用下划线（如：/user_info）或camelCase（如：/userInfo)的单词被当成一个单词，搜索引擎无法区分语义。 // bad { path: '/user_info', // user_info当成一个单词 name: 'UserInfo', component: UserInfo, meta: { title: ' - 用户', desc: '' } }, // good { path: '/user-info', // 能解析成user info name: 'UserInfo', component: UserInfo, meta: { title: ' - 用户', desc: '' } }, methods 命名规范驼峰式命名，统一使用动词或者动词+名词形式 //bad go、nextPage、show、login、get_code // good jumpPage、openCarInfoDialog 请求数据方法，以 data 结尾 //bad takeData、confirmData、getList、postForm // good getListData、postFormData 尽量使用常用单词开头（set、get、go、can、has、is） 附： 函数方法常用的动词 get 获取/set 设置, add 增加/remove 删除 create 创建/destory 移除 start 启动/stop 停止 open 打开/close 关闭, read 读取/write 写入 load 载入/save 保存, create 创建/destroy 销毁 begin 开始/end 结束, backup 备份/restore 恢复 import 导入/export 导出, split 分割/merge 合并 inject 注入/extract 提取, attach 附着/detach 脱离 bind 绑定/separate 分离, view 查看/browse 浏览 edit 编辑/modify 修改, select 选取/mark 标记 copy 复制/paste 粘贴, undo 撤销/redo 重做 insert 插入/delete 移除, add 加入/append 添加 clean 清理/clear 清除, index 索引/sort 排序 find 查找/search 搜索, increase 增加/decrease 减少 play 播放/pause 暂停, launch 启动/run 运行 compile 编译/execute 执行, debug 调试/trace 跟踪 observe 观察/listen 监听, build 构建/publish 发布 input 输入/output 输出, encode 编码/decode 解码 encrypt 加密/decrypt 解密, compress 压缩/decompress 解压缩 pack 打包/unpack 解包, parse 解析/emit 生成 connect 连接/disconnect 断开, send 发送/receive 接收 download 下载/upload 上传, refresh 刷新/synchronize 同步 update 更新/revert 复原, lock 锁定/unlock 解锁 check out 签出/check in 签入, submit 提交/commit 交付 push 推/pull 拉, expand 展开/collapse 折叠 begin 起始/end 结束, start 开始/finish 完成 enter 进入/exit 退出, abort 放弃/quit 离开 obsolete 废弃/depreciate 废旧, collect 收集/aggregate 聚集 多个属性的html元素规范多个特性的元素，占据一行过长时，应该分多行撰写，每个特性一行。(增强更易读) &lt;!-- bad --> &lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo"> &lt;my-component foo="fooattribute" bar="barattribute" baz="bazattribute">&lt;/my-component> &lt;!-- good --> &lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo"> &lt;my-component foo="fooattribute" bar="barattribute" baz="bazattribute"/> 指令规范 v-for 循环必须加上 key 属性，在整个 for 循环中 key 需要唯一 避免 v-if 和 v-for 同时用在一个元素上（性能问题）出现这样的需求，有两种解决方案： 将数据替换为一个计算属性，让其返回过滤后的列表 &lt;!-- bad --> &lt;ul> &lt;li v-for="user in users" v-if="user.isActive" :key="user.id"> {{ user.name }} &lt;/li> &lt;/ul> &lt;!-- good --> &lt;ul> &lt;li v-for="user in activeUsers" :key="user.id"> {{ user.name }} &lt;/li> &lt;/ul> &lt;script> computed: { activeUsers: function () { return this.users.filter(function (user) { return user.isActive }) } } &lt;/script> 将 v-if 移动至容器元素上 (比如 ul, ol) &lt;!-- bad --> &lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers" :key="user.id"> {{ user.name }} &lt;/li> &lt;/ul> &lt;!-- good --> &lt;ul v-if="shouldShowUsers"> &lt;li v-for="user in users" :key="user.id"> {{ user.name }} &lt;/li> &lt;/ul>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端-JS规范]]></title>
    <url>%2F2019%2F02%2F15%2Fqianduanjsguifan%2F</url>
    <content type="text"><![CDATA[命名 变量 命名方式：小驼峰 命名规范：前缀名词 命名建议：语义化 // bad let setCount = 10; let getTitle = "loginTable"; // good let maxCount = 10; let tableTitle = "loginTable" 常量 常量全大写，用下划线连接 const MAX_COUNT = 10; 函数 命名方式：小驼峰式命名法。 命名规范：前缀应当为动词。 命名建议：语义化 动词 含义 返回值 can 判断是否可执行某个动作（权限） 函数返回一个布尔值。 true: 可执行， false: 不可执行 has 判断是否含有某个词 函数返回一个布尔值。 true: 含有此值， false: 不含有此值 is 判断是否为某个词 函数返回一个布尔值。 true: 为此值， false: 不为此值 get 获取某个词 函数返回一个非布尔值 set 设置某个词 无返回值，返回是否设置或返回链式对象 load 加载某些数据 无返回值或返回是否加载完成的结果 // 是否可阅读 function canRead() { return true; } // 获取名称 function getName() { return this.name; } 类 / 构造函数 命名方式：大驼峰式命名法（每个单词首字母大写），首字母大写 命名规范：前缀为名称。 命名建议：语义化 class Person { public name: string; constructor(name) { this.name = name; } } const person = new Person('mevyn'); 类的成员 类的成员包含： * 公共属性和方法：跟变量和函数的命名一样。 * 私有属性和方法：前缀为_(下划线)，后面跟公共属性和方法一样的命名方式。 class Person { private _name: string; constructor() { } // 公共方法 getName() { return this._name; } // 公共方法 setName(name) { this._name = name; } } const person = new Person(); person.setName('mervyn'); person.getName(); // ->mervyn jquery 对象 jquery 对象必须以 $ 开头命名 let $body = $('body'); 模块 模块应该以 ! 开始。这样确保了当一个不好的模块忘记包含最后的分号时，在合并代码到生产环境后不会产生错误。详细说明 文件应该以驼峰式命名，并放在同名的文件夹里，且与导出的名字一致。 增加一个名为 noConflict() 的方法来设置导出的模块为前一个版本并返回它。 永远在模块顶部声明 ‘use strict’;。 // fancyInput/fancyInput.js !function (global) { 'use strict'; var previousFancyInput = global.FancyInput; function FancyInput(options) { this.options = options || {}; } FancyInput.noConflict = function noConflict() { global.FancyInput = previousFancyInput; return FancyInput; }; global.FancyInput = FancyInput; }(this); 构造函数 给对象原型分配方法，而不是使用一个新对象覆盖原型。覆盖原型将导致继承出现问题：重设原型将覆盖原有原型！ function Jedi() { console.log('new jedi'); } // bad Jedi.prototype = { fight: function fight() { console.log('fighting'); }, block: function block() { console.log('blocking'); } }; // good Jedi.prototype.fight = function fight() { console.log('fighting'); }; Jedi.prototype.block = function block() { console.log('blocking'); }; 方法可以返回 this 来实现方法链式使用。 // bad Jedi.prototype.jump = function jump() { this.jumping = true; return true; }; Jedi.prototype.setHeight = function setHeight(height) { this.height = height; }; var luke = new Jedi(); luke.jump(); // => true luke.setHeight(20); // => undefined // good Jedi.prototype.jump = function jump() { this.jumping = true; return this; }; Jedi.prototype.setHeight = function setHeight(height) { this.height = height; return this; }; var luke = new Jedi(); luke.jump().setHeight(20); 缩进 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符 switch 下的 case 和 default 必须增加一个缩进层级 switch (variable) { case 1: break; default: break; } 对象以缩进的形式书写，不要写在一行 // better let obj = { a: 1, b: 2 } // bad let obj = { a: 1, b: 2 } 分号任何语句结尾都需要加分号 ; do { x++; } while (x &lt; 10); 空格 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格 用作代码块起始的左花括号 { 前必须有一个空格 if / else / for / while / function / switch / do / try / catch / finally 等关键字后，必须有一个空格 在非三目运算符中，: 之后必须有空格，之前不允许有空格 , 和 ; 之前不允许有空格，之后必须有空格 函数名和 ( 之间不允许有空格 单行注释 // 后需要空格（若单行注释和代码同行，则 // 前也需要） 行尾不得有多余的空格 let len = !arr.length; if (len) { Demo(1, 2); } // 函数 function Demo(a, b) { let obj = { // 对象 a: 1 } } 空行 代码块注释前与代码块后保留一个空行 let a = 1; // 注释 if (a == 2) { return; } a = 2; 换行 每个语句必须另起一行 变量赋值后需要换行 左大括号 { 后需要换行，右大括号 } 前需要换行 let a, b, c = true; if (c) { return; } 注释 单行注释使用 //，多行注释使用 /* */ 缩进与下一行代码保持一致 文档 / 接口注释使用以下写法 /** * 文档描述 * @author 作者 * @date 创建时间 * @update 更新者 更新时间 */ /** * 接口描述 * @param {String} title - 弹窗标题内容 * @param {String} cancelBtnText = '默认值' - 取消按钮文本 * @param {object} obj - 参数 obj 为一个对象 * @param {String} obj.str - 参数 obj 的 str 属性 */ function (title, cancelBtnText, obj) { } 引号最外层统一使用单引号 &#39;&#39; let str = '&lt;div id="test">&lt;/div>'; 变量声明 变量在使用前必须通过 var / let / const 定义 不要使用未声明的变量，也不要先使用后声明 let name = 'MyName'; 对象对象属性名不需要加引号，有特殊字符除外 let obj = { name: 'test', age: 20, 'max-weight': 60 }; 大括号if / else / for / while / do / switch / try / catch 等关键字后必须有大括号（即使代码块的内容只有一行） if (true) { return; } undefined 永远不要直接使用undefined进行变量判断 使用 typeof 和字符串 &#39;undefined&#39; 对变量进行判断 // good if (typeof person === 'undefined') { return; } // bad if (person === undefined) { return; } 其他 用 ===, !== 代替 ==, != debugger 不要出现在生产环境的代码里 不要在循环内部声明函数 不允许有空的代码块 注释的大段代码 不需要的删除；如果需要请注释说明 推荐文章1、凹凸使用实验室的前端开发规范2、hardylinfee前端开发规范]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端-HTML规范]]></title>
    <url>%2F2019%2F02%2F15%2Fqianduanhtmlguifan%2F</url>
    <content type="text"><![CDATA[class、id命名规则 class 不能使用驼峰 使用(烤串写法) 例子：class=”login-dialog” class=”login-form-dialog” 命名建议：页面-属性-功能 公用类 修饰符-功能 id 一般参与样式，命名的话使用驼峰。 标签使用 内联元素内不能有块级元素 标签里面的样式超过2个需要提出来 语法 使用 4 个空格做为一个缩进层级，不允许使用 2 在属性上，使用双引号 &quot;&quot;，不要使用单引号 &#39;&#39; 属性名 / 属性值全小写，用中划线 - 做分隔符 不要忽略可选的关闭标签，例：&lt;/li&gt; 和 &lt;/body&gt; &lt;!-- good --> &lt;body> &lt;img src="logo.png" alt="logo"> &lt;ul> &lt;li class="first-child">first&lt;/li> &lt;li data-index="2">second&lt;/li> &lt;/ul> &lt;/body> HTML5 doctype在页面开头使用这个简单的 doctype 来启用标准模式，使其在每个浏览器中尽可能一致的展现 虽然 doctype 不区分大小写，但是按照惯例，doctype 使用全大写 &lt;!-- good --> &lt;!DOCTYPE html> lang 属性根据HTML5规范： 应在 html 标签上加上 lang 属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。 在 sitepoint 上可以查到 语言列表 但 sitepoint 只是给出了语言的大类，例如中文只给出了 zh，但是没有区分香港，台湾，大陆。而微软给出了一份更加详细的 语言列表.aspx)，其中细分了 zh-cn, zh-hk, zh-tw &lt;!DOCTYPE html> &lt;html lang="zh-cn"> &lt;/html> 字符编码通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为 “utf-8” &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset="utf-8"> &lt;/head> &lt;/html> IE 兼容模式用 &lt;meta&gt; 标签可以指定页面应该用什么版本的 IE 来渲染，PC 端项目，建议启用 IE Edge 模式 &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;!-- 极速模式 --> &lt;meta name="renderer" content="webkit" /> &lt;!-- IE兼容 --> &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge"> &lt;/head> &lt;/html> 引入 CSS、JS 根据 HTML5 规范, 通常在引入 CSS 和 JS 时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值 在引入 CSS 时，必须指明 rel=&quot;stylesheet&quot; 将 script 放在页面中间将阻断页面的渲染，出于性能方面的考虑，如非必要，JavaScript 应当放在页面末尾 &lt;html> &lt;head> &lt;link rel="stylesheet" src="index.css"> &lt;/head> &lt;body> &lt;script src="index.js">&lt;/script> &lt;/body> &lt;/html> boolean 属性boolean 属性指不需要声明取值的属性，XHTML 需要每个属性声明取值，但是 HTML5 并不需要 &lt;!-- good --> &lt;input type="text" disabled> &lt;input type="checkbox" value="1" checked> &lt;!-- bad --> &lt;input type="text" disabled="disabled"> &lt;input type="checkbox" value="1" checked="true"> 减少标签数量在编写HTML代码时，需要尽量避免多余的父节点 &lt;!-- good --> &lt;img class="logo" src="logo.png"> &lt;!-- bad --> &lt;span class="logo"> &lt;img src="logo.png"> &lt;/span> 实用高于完美 尽量遵循 HTML 标准和语义，但是不应该以浪费实用性作为代价 任何时候都要用尽量小的复杂度和尽量少的标签来解决问题 推荐文章1、凹凸使用实验室的前端开发规范2、hardylinfee前端开发规范]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端-CSS规范]]></title>
    <url>%2F2019%2F02%2F15%2Fqianduancssguifan%2F</url>
    <content type="text"><![CDATA[class、id命名规则 class 不能使用驼峰 使用(烤串写法) 命名建议：页面-属性-功能 公用类：修饰符-功能 例子：class=&quot;login-dialog&quot; class=&quot;login-form-dialog&quot; id 一般参与样式，命名的话使用驼峰。 页面布局页面布局均采用最新版 flexbox 进行布局，需兼容低版本 IE 项目除外。 .selector { display: flex; justify-content: center; align-items: center; } 缩进使用 4 个空格作为一个缩进层级，不允许使用 2 个空格。 .selector { margin: 0; padding: 0; } 分号每个属性声明末尾都要加分号 .selector { width: 100%; height: 100%; } 空格 : 与属性值之间需要空格，与属性名之间不需要空格 属性值中的 , 后需要空格，, 前不需要空格 选择器 &gt; + ~ 等前后需要空格 选择器与 { 之间需要空格 / 前后需要空格 注释 /* 后和 */ 前需要空格 .selector > .wrapper { font-family: "Hiragino Sans GB", sans-serif; background: rgba(0, 0, 0, 0.5) url(logo.png) no-repeat center / contain; height: 100%; } 空行 两个选择器属性块之间保留一个空行 代码块注释前与代码块后保留一个空行 .wrapper { height: 100%; /* 字体相关 */ font-family: 'DINPro'; font-size: 16px; font-weight: 700; background: #000; } .selector { height: 100%; } 换行 当一个规则包含多个选择器时，每个选择器声明必须独占一行 每个属性定义必须另起一行 { 后需要换行，} 前需要换行 .wrapper, .selector { width: 100%; height: 100%; } 注释 统一使用 /* */ 进行注释 缩进与下一行代码保持一致 可位于一个代码行的末尾，与代码间隔一个空格 .wrapper, .selector { /* 字体相关 */ font-family: 'DINPro'; font-size: 16px; font-weight: 700; /* 字重 */ } 引号 引号统一使用双引号 属性选择器中的属性值需要引号 [class="demo"]::after { content: ""; } 颜色 16 进制颜色使用小写字母 16 进制颜色尽量使用简写 /* good */ .selector { color: #abc; } /* bad */ .selector { color: #AABBCC; } 属性简写支持简写的属性尽量使用简写小数点前不需加0 /* better */ .selector { background: rgba(0, 0, 0, 0.5) url(logo.png) no-repeat center / contain; } /* bad */ .selector { background-color: rgba(0, 0, 0, 0.5); background-image: url(logo.png); background-repeat: no-repeat; background-position: center; background-size: contain; } 属性声明顺序 影响文档流的属性（比如：display / position / float / clear / visibility 等） 自身盒模型的属性（比如：width / height / margin / padding / border 等） 排版相关属性（比如：font / line-height / text-align / vertical-align 等） 装饰性属性（比如：color / background / opacity / cursor 等） CSS3 新特性（比如：transform / transition / animation 等） 口诀: 显示大小文字背景 注意 不允许有空的规则 元素选择器用小写字母 属性值 0 后面不要加单位 无前缀的标准属性应该写在有前缀的属性后面 不要在一个文件里出现两个相同的规则 发布的代码中不要有 @import 尽量不用 * 选择器 禁止使用!important 禁止使用id去修饰样式 position和float 能不用浮动就不要用浮动 尤其是float（使用float请保证父标签能被子标签内容撑开） 不要使用【标签做修饰符】-&gt;影响渲染速度 (除了万不得已的情况下) 推荐文章1、凹凸使用实验室的前端开发规范2、hardylinfee前端开发规范]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
